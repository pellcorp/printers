[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : True  ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 215.0 ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 205.0  ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 50.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
gcode:

[gcode_macro PRINTER_PARAM]
variable_fan0_min: 25
variable_fan1_min: 50
variable_fan2_min: 180
gcode:

# modified from https://github.com/Guilouz/Creality-Helper-Script/blob/main/files/macros/fans-control.cfg
[gcode_macro M106]
gcode:
  {% set fan = 0 %}
  {% set value = 0 %}
  {% if params.P is defined %}
    {% set fan = params.P|int %}
  {% endif %}
  {% if params.S is defined %}
    {% set temp = params.S|float %}
  {% else %}
    {% set temp = 255 %}
  {% endif %}
  {% if fan == 3 %}
    {% set fan = 1 %}
  {% endif %}
  {% if temp > 0 %}
    {% if fan == 0 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan0_min) / 255 * temp %}
      {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + value %}
    {% endif %}
    {% if fan == 1 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan1_min) / 255 * temp %}
      {% set value = printer["gcode_macro PRINTER_PARAM"].fan1_min + value %}
    {% endif %}
    {% if fan == 2 %}
      {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan2_min) / 255 * temp %}
      {% set value = printer["gcode_macro PRINTER_PARAM"].fan2_min + value %}
    {% endif %}
  {% endif %}
  {% if value >= 255 %}
    {% set value = 255 %}
  {% endif %}
  SET_PIN PIN=fan{fan} VALUE={value}

[gcode_macro M107]
gcode:
  {% set fans = printer["gcode_macro PRINTER_PARAM"].fans|int %}
  {% if params.P is defined %}
    {% set fan = params.P|int %}
    {% if fan == 3 %}
      {% set fan = 1 %}
    {% endif %}
    SET_PIN PIN=fan{fan} VALUE=0
  {% else %}
    SET_PIN PIN=fan0 VALUE=0
    SET_PIN PIN=fan1 VALUE=0
    SET_PIN PIN=fan2 VALUE=0
  {% endif %}

[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}

[gcode_macro START_PRINT]
gcode:
	{% set BED_TEMP=params.BED_TEMP|default(55)|float %}
	{% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(195)|float %}
	
	# Home the printer
	G90
	M83
	G28
	
	# Preheat the bed
	M140 S{BED_TEMP}
	M190 S{BED_TEMP}
	
	BED_MESH_CALIBRATE ADAPTIVE=1 ADAPTIVE_MARGIN=5
	
	# Heat the extruder to the desired temperature
	M104 S{EXTRUDER_TEMP}
	M109 S{EXTRUDER_TEMP}
	
	# Prime line sequence
	G92 E0				     	      # Reset Extruder
    	G0 Z2.0 F{ 50 * 60 }    	      # Move Z Axis to travel height
    	G0 X0.1 Y20 F{ 100 * 60 } 	      # Move to start position
    	G0 Z0.35 F{ 2 * 60 } 	          # Move to extrude height
    	G1 X0.1 Y200.0 F{ 50 * 60 } E15	  # Draw the first line
    	G0 X0.5 Z0.35				      # Move to side a little
    	G1 Y20 E20				          # Draw the second line
    	G1 Y195 E-1				          # Wipe
    	G1 Z5                             # Move Z Axis up to travel height
    	G1 E1           	              # De-retract
    	G92 E0				              # Reset Extruder

[gcode_macro END_PRINT]
description: End the actual running print
gcode:
  _CLIENT_RETRACT LENGTH=5
  TURN_OFF_HEATERS

  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

# emergency situation calls for drastic
[gcode_shell_command emergency_factory_reset]
command: /usr/data/printers/k1/install/wipe.sh "all"
timeout: 5.
verbose: True

[gcode_macro EMERGENCY_FACTORY_RESET]
gcode:
    RUN_SHELL_COMMAND CMD=emergency_factory_reset
